<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on T.J. Barbour</title>
    <link>/www.tjbarbour.com/categories/development/index.xml</link>
    <description>Recent content in Development on T.J. Barbour</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>The information in this weblog is provided &#34;AS IS&#34; with no warranties, and confers no rights.  This weblog does not represent the thoughts, intentions, plans or strategies of my employer. It is solely my opinion.</copyright>
    <atom:link href="/www.tjbarbour.com/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why Fluent Wins</title>
      <link>/www.tjbarbour.com/post/WhyFluentWins/</link>
      <pubDate>Mon, 14 Mar 2016 01:43:44 -0700</pubDate>
      
      <guid>/www.tjbarbour.com/post/WhyFluentWins/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Fluent APIs better match our mental model of how data is processed == WIN&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;cześć-hello-in-polish&#34;&gt;Cześć (hello in Polish)&lt;/h1&gt;

&lt;p&gt;Does this make sense to you?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;+ 3 4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You may read this as &amp;ldquo;Let&amp;rsquo;s do an addition of 3 and 4.&amp;rdquo;  Sure, you may be familiar with &lt;a href=&#34;https://en.wikipedia.org/wiki/Polish_notation&#34;&gt;&amp;ldquo;Polish Notation&amp;rdquo;&lt;/a&gt; or variants like &amp;ldquo;Reverse Polish Notation&amp;rdquo; or RPN, but it&amp;rsquo;s not how most people naturally process these kind of operations.&lt;/p&gt;

&lt;p&gt;Of course, we usually think about it like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;3 + 4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here we envision this as &amp;ldquo;You have three, now add four to it.&amp;rdquo;  This seems natural.  And as we&amp;rsquo;ll see, other notations aggravate the complexity when you chain many operations.&lt;/p&gt;

&lt;h1 id=&#34;functions-make-us-think-in-reverse&#34;&gt;Functions make us think in reverse&lt;/h1&gt;

&lt;p&gt;Functions/Methods act more like Polish notation:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;int result = Math.pow(2,3); // 8&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So when programming we write something like &lt;code&gt;POWER 2,3&lt;/code&gt; while in math terms we would write &lt;code&gt;2^3&lt;/code&gt;.  This gets even more confusing when you chain several operations.  Let&amp;rsquo;s take the example of doing some data conversion:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get a string from an XML document&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Base64&#34;&gt;Base64&lt;/a&gt; decode the string to get the binary value&lt;/li&gt;
&lt;li&gt;Decrypt the binary value&lt;/li&gt;
&lt;li&gt;Encode the clear binary value as an ASCII string&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s look at how this process would be carried out using normal function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = ASCIIEncode( Decrypt( Base64Decode( xml.GetAttribute(&amp;quot;foo&amp;quot;) ), decryptParameters ) );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When reading this code, the order is almost completely reversed.  Also, when writing it, we keep to jumping around to &amp;ldquo;surround&amp;rdquo; one function with another, watch:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;www.tjbarbour.com/img/fluent-bad.gif&#34; alt=&#34;traditional functions&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, this can be partially remedied with intermediate variables, but you may not have any use for them.&lt;/p&gt;

&lt;p&gt;One style of API that remedies this is the &lt;a href=&#34;http://martinfowler.com/bliki/FluentInterface.html&#34;&gt;Fluent Interface&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;fluent-methods-go-step-by-step&#34;&gt;Fluent Methods go step by step&lt;/h1&gt;

&lt;p&gt;A fluent interface usually works by always returning an object of a shared type which exposes common functions.  &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt; is a prime example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;.some-class&amp;quot;)
  .css(&amp;quot;color&amp;quot;,&amp;quot;red&amp;quot;)
  .css(&amp;quot;padding&amp;quot;,10)
  .on(&amp;quot;click&amp;quot;, function(){ console.log(&amp;quot;hai&amp;quot;); });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to acheive fluent-like interfaces is by adding methods as members to the types they operate on instead of stand alone functions, for example:&lt;/p&gt;

&lt;p&gt;Instead of a generic utility class like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Math
{
    // ...
    public Double Power(double base, double exponent)
    {
        // ... 
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Imagine a method on the numeric type itself like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Double
{
    // ...
    public Double ToPower(double exponent)
    {
        return Math.Power(this,exponent); 
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With usage like &lt;code&gt;2.ToPower(3)&lt;/code&gt; isn&amp;rsquo;t it a bit clearer?&lt;/p&gt;

&lt;p&gt;There are some side benefits as well.  For example, there&amp;rsquo;s less chance you could confuse &lt;strong&gt;parameter order&lt;/strong&gt; with this version of the power function.  This also gives us a very &lt;strong&gt;guided way to organize methods&lt;/strong&gt;.  Instead of having a generic &amp;lsquo;utility&amp;rsquo; class which could become a mishmash of unrelated methods, we add methods to whichever class they apply.  This makes it easier for future developers to find where to add new utility methods and can help avoid &lt;a href=&#34;https://css-tricks.com/what-is-bikeshedding/&#34;&gt;Bikeshedding&lt;/a&gt; about how to organize APIs.&lt;/p&gt;

&lt;h1 id=&#34;example-fluent-ized&#34;&gt;Example, Fluent-ized&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s return to our data conversion sample from earlier, and assume we&amp;rsquo;ve added on the needed class methods for the conversions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = xml.GetAttribute(&amp;quot;foo&amp;quot;).FromBase64().Decrypt(decryptParameters).ToASCII();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how much easier it is to follow?  You can read through the conversion left to right and typing is much smoother as well, watch:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;www.tjbarbour.com/img/fluent-good.gif&#34; alt=&#34;fluent interface&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You could say this style of API is more &amp;ldquo;ergonomic&amp;rdquo; for the consumer.  You can achieve this in C# using &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb383977.aspx&#34;&gt;Extension &lt;/a&gt; &lt;a href=&#34;http://www.dotnetperls.com/extension&#34;&gt;Methods&lt;/a&gt;, which I&amp;rsquo;ll have to write about soon :)&lt;/p&gt;

&lt;p&gt;Moral of the story: &lt;strong&gt;Use Fluent API design whenever possible to ease your API consumer&amp;rsquo;s development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(P.S. Thanks to &lt;a href=&#34;http://text.livetyping.com/&#34;&gt;Livetyping&lt;/a&gt; for the typing animations!)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>/www.tjbarbour.com/post/hello-world/</link>
      <pubDate>Fri, 25 Dec 2015 00:45:22 -0800</pubDate>
      
      <guid>/www.tjbarbour.com/post/hello-world/</guid>
      <description>

&lt;h1 id=&#34;hello-world&#34;&gt;Hello World!&lt;/h1&gt;

&lt;p&gt;Just setting up my blog, I&amp;rsquo;m using &lt;a href=&#34;https://gohugo.io/&#34;&gt;HUGO.io&lt;/a&gt; for static site generation, with the &lt;a href=&#34;http://themes.gohugo.io/startbootstrap-clean-blog/&#34;&gt;Start Bootstrap Clean Blog Template&lt;/a&gt; following the great instructions at the &lt;a href=&#34;https://github.com/humboldtux/sbcb-demo&#34;&gt;sample blog&amp;rsquo;s repo&lt;/a&gt;.  Also, I&amp;rsquo;m using the awesome &lt;a href=&#34;http://alssndro.github.io/trianglify-background-generator/&#34;&gt;Trianglify Background Generator&lt;/a&gt; for my backgrounds.&lt;/p&gt;

&lt;p&gt;More coming soon!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>